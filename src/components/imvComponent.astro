---
import imvData from "../collections/guia_imv.json";

const data = imvData;
---

<div class="container">
  <h1>Guía IMV</h1>

  <div class="grid">
    <!-- Botones para abrir cada sección -->
    <button class="btn" onclick="modal_definicion.showModal(); modal_definicion.scrollTop = 0;">Definición</button>
    <button class="btn" onclick="modal_criterios_imv.showModal(); modal_criterios_imv.scrollTop = 0;">Criterios de Activación</button>
    <button class="btn" onclick="modal_canales.showModal(); modal_canales.scrollTop = 0;">Canales de Comunicación</button>
    <button class="btn" onclick="modal_respuesta.showModal(); modal_respuesta.scrollTop = 0;">Respuesta Inicial</button>
    <button class="btn" onclick="modal_roles.showModal(); modal_roles.scrollTop = 0;">Roles y Funciones</button>
    <button class="btn" onclick="modal_triaje.showModal(); modal_triaje.scrollTop = 0;">Triaje</button>
    <button class="btn" onclick="modal_finalizacion.showModal(); modal_finalizacion.scrollTop = 0;">Finalización</button>
  </div>
</div>

<!-- Modal Definición -->
<dialog id="modal_definicion">
  <h2>Definición</h2>
  <p>{data.definicion}</p>
  <form method="dialog"><button class="btn btn-close">Cerrar</button></form>
</dialog>

<!-- Modal Criterios de Activación -->
<dialog id="modal_criterios_imv">
  <h2>Criterios de Activación</h2>
  <ul>
    {data.criterios_activacion.map(item => (
      <li>{item}</li>
    ))}
  </ul>
  <form method="dialog"><button class="btn btn-close">Cerrar</button></form>
</dialog>

<!-- Modal Canales de Comunicación -->
<dialog id="modal_canales">
  <h2>Canales de Comunicación</h2>
  <ul>
    {Object.entries(data.canales_comunicacion).map(([canal, descripcion]) => (
      <li><strong>{canal}:</strong> {descripcion}</li>
    ))}
  </ul>
  <form method="dialog"><button class="btn btn-close">Cerrar</button></form>
</dialog>

<!-- Modal Respuesta Inicial -->
<dialog id="modal_respuesta">
  <h2>Respuesta Inicial</h2>
  <div class="table-wrapper">
    <table>
      <thead>
        <tr>
          <th>Nivel</th>
          <th>Víctimas totales</th>
          <th>Recursos</th>
        </tr>
      </thead>
      <tbody>
  {data.niveles_respuesta.map(nivel => (
    <tr>
      <td data-label="Nivel">{nivel.nivel}</td>
      <td data-label="Víctimas totales">{nivel.victimas_totales}</td>
      <td data-label="Recursos">
       
        {Object.entries(nivel.recursos).map(([recurso, cantidad], idx) => (
          <span>{cantidad} {recurso.toUpperCase()}</span>
        ))}
      </td>
    </tr>
  ))}
</tbody>
    </table>
  </div>
  <form method="dialog"><button class="btn btn-close">Cerrar</button></form>
</dialog>

<!-- Modal Roles y Funciones -->
<dialog id="modal_roles">
  <h2>Roles y Funciones</h2>

  <!-- JDS -->
  {data.roles?.JDS && (
    <section>
      <h3>Jefe de Dispositivo Sanitario (JDS)</h3>
      <p>{data.roles.JDS.descripcion}</p>
      {Array.isArray(data.roles.JDS.funciones) && (
        <ul>
          {data.roles.JDS.funciones.map(fn => (<li>{fn}</li>))}
        </ul>
      )}
    </section>
  )}

  <!-- EGI -->
  {data.roles?.EGI && (
    <section>
      <h3>Equipo Gestor del Incidente (EGI)</h3>
      <p>{data.roles.EGI.descripcion}</p>
      {data.roles.EGI.integrantes && (
        <ul>
          {Object.entries(data.roles.EGI.integrantes).map(([integrante, tareas]) => (
            <li>
              <strong>{integrante}:</strong>
              <ul>
                {tareas.map(t => (<li>{t}</li>))}
              </ul>
            </li>
          ))}
        </ul>
      )}
    </section>
  )}

  <!-- Supervisora de Guardia -->
  {data.roles?.Supervisora_de_Guardia && (
    <section>
      <h3>Supervisora de Guardia</h3>
      <p>{data.roles.Supervisora_de_Guardia.descripcion}</p>
      {Array.isArray(data.roles.Supervisora_de_Guardia.funciones) && (
        <ul>
          {data.roles.Supervisora_de_Guardia.funciones.map(fn => (<li>{fn}</li>))}
        </ul>
      )}
    </section>
  )}

  <!-- Primera Unidad -->
  {data.roles?.Primera_Unidad && (
    <section>
      <h3>Primera Unidad</h3>
      <p>{data.roles.Primera_Unidad.descripcion}</p>
      {Array.isArray(data.roles.Primera_Unidad.funciones) && (
        <ul>
          {data.roles.Primera_Unidad.funciones.map(fn => (<li>{fn}</li>))}
        </ul>
      )}
    </section>
  )}

  <!-- PSA -->
  {data.roles?.PSA && data.roles.PSA.responsables && (
    <section>
      <h3>Puesto Sanitario Avanzado (PSA)</h3>
      <ul>
        {Object.entries(data.roles.PSA.responsables).map(([responsable, tareas]) => (
          <li>
            <strong>{responsable}:</strong>
            <ul>
              {tareas.map(t => (<li>{t}</li>))}
            </ul>
          </li>
        ))}
      </ul>
    </section>
  )}

  <!-- Chalecos -->
  {data.roles?.chalecos && (
    <section>
      <h3>Chalecos de Identificación</h3>
      <ul>
        {Object.entries(data.roles.chalecos).map(([color, descripcion]) => (
          <li><strong>{color}:</strong> {descripcion}</li>
        ))}
      </ul>
    </section>
  )}

  <form method="dialog"><button class="btn btn-close">Cerrar</button></form>
</dialog>

<!-- Modal Triaje -->
<dialog id="modal_triaje">
  <h2>Triaje</h2>
  <ul>
    {data.triage.tipos.map(t => (
      <li>{t}</li>
    ))}
  </ul>
  <p><strong>Evacuación prioritaria:</strong> {data.triage.criterios_evacuacion_prioritaria}</p>
  <p><strong>Observaciones:</strong> {data.triage.observaciones}</p>
  <form method="dialog"><button class="btn btn-close">Cerrar</button></form>
</dialog>

<!-- Modal Finalización -->
<dialog id="modal_finalizacion">
  <h2>Finalización del IMV</h2>
  <h3>Condiciones para finalizar</h3>
  <ul>
    {data.finalizacion.condiciones.map(cond => (<li>{cond}</li>))}
  </ul>
  <h3>Registro y documentación</h3>
  <ul>
    {data.finalizacion.registro_documentacion.map(item => (<li>{item}</li>))}
  </ul>
  <h3>Contenido del informe final</h3>
  <ul>
    {data.finalizacion.informe_final.map(item => (<li>{item}</li>))}
  </ul>
  <form method="dialog"><button class="btn btn-close">Cerrar</button></form>
</dialog>

<style>
  .table-wrapper {
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
  max-width: 100%;
}

/* Tabla base */
table {
  width: 100%;
  border-collapse: collapse;
  table-layout: fixed;          /* Mejora el wrap de contenido */
}

th, td {
  padding: 0.75rem;
  border: 1px solid var(--color-card-border);
  color: var(--color-text);
  vertical-align: top;
  word-break: break-word;       /* Evita desbordes en palabras largas */
  overflow-wrap: anywhere;      /* Permite cortes más agresivos si es necesario */
}

thead th {
  position: sticky;
  top: 0;
  background: var(--color-card-bg);
  z-index: 1;
}

tbody tr:nth-child(even) {
  background: var(--color-card-bg);
}

/* Etiquetas de “chips” dentro de Recursos (sin tocar tu HTML) */
td span {
  display: inline-block;
  margin-right: .5rem;
  margin-bottom: .35rem;
  line-height: 1.2;
  /* En desktop mantenemos en una línea si es corto, en móvil forzamos wrap abajo */
  white-space: normal;
}

/* Dialog responsive */
dialog {
  width: 100%;
  max-width: min(900px, 100vw - 2rem);
  margin: auto;
  padding: 1rem;
}
dialog::backdrop { backdrop-filter: blur(2px); }

/* ---- MÓVIL ---- */
@media (max-width: 600px) {
  thead { display: none; }

  tbody tr {
    display: block;
    border: 1px solid var(--color-card-border);
    border-radius: 0.75rem;
    padding: 0.5rem 0.75rem;
    margin-bottom: 1rem;
    background: var(--color-card-bg);
  }

  tbody td {
    display: grid;                 
    gap: 0.25rem 0.75rem;
    border: 0;                     
    padding: 0.5rem 0;
  }

  tbody td + td {
    border-top: 1px dashed var(--color-card-border);
    padding-top: 0.75rem;
    margin-top: 0.25rem;
  }


  tbody td::before {
    font-weight: 700;
    content: attr(data-label);   
    opacity: 0.85;
  }

 
  td span {
    white-space: normal;
  }
}

</style>
